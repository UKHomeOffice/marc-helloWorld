eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIG15LWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGhlbGxvd29ybGQgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKICBpbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJtYXJjbHlvbnFhIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgaGVsbG93b3JsZCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbWFyYy1oZWxsb3dvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbWFyYy1oZWxsb3dvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIHRyaWdnZXJfZGVwbG95X3RvX2RldjoKICAgIGNvbW1hbmRzOgogICAgICAtICJBUFBfTkFNRT1vbTgzNDIzNSBrZCAtZiBrdWJlLXRlbXBsYXRlZC9kZXBsb3ltZW50LnlhbWwgLWYga3ViZS10ZW1wbGF0ZWQvc2VydmljZS55YW1sIC1mIGt1YmUtdGVtcGxhdGVkL2luZ3Jlc3MueWFtbCBrZCAtZiBrdWJlLXRlbXBsYXRlZC9zZWNyZXQueWFtbCAiCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSAiS1VCRV9OQU1FU1BBQ0U9ZGV2LWluZHVjdGlvbiIKICAgICAgLSAiS1VCRV9TRVJWRVI9aHR0cHM6Ly9rdWJlLWRldi5kc3Aubm90cHJvZC5ob21lb2ZmaWNlLmdvdi51ayIKICAgICAgLSAiSU5TRUNVUkVfU0tJUF9UTFNfVkVSSUZZPXRydWUiCiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEtZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCg.pagbufzo3G1YzvnhHWEazEe3DQe1RB1zTegyjFIKvas