eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIG15LWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGhlbGxvd29ybGQgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKICBpbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJtYXJjbHlvbnFhIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgaGVsbG93b3JsZCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbWFyYy1oZWxsb3dvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvbWFyYy1oZWxsb3dvcmxkOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIHRyaWdnZXJfZGVwbG95X3RvX2RldjoKICAgIGNvbW1hbmRzOgogICAgICAtICJBUFBfTkFNRT1vbTgzNDIzNSBrZCAtZiBrdWJlLXRlbXBsYXRlZC9kZXBsb3ltZW50LnlhbWwgLWYga3ViZS10ZW1wbGF0ZWQvc2VydmljZS55YW1sIC0tZmlsZSBrdWJlLXRlbXBsYXRlZC9pbmdyZXNzLnlhbWwga2QgLS1maWxlIGt1YmUtdGVtcGxhdGVkL3NlY3JldC55YW1sICIKICAgIGVudmlyb25tZW50OgogICAgICAtICJLVUJFX05BTUVTUEFDRT1kZXYtaW5kdWN0aW9uIgogICAgICAtICJLVUJFX1NFUlZFUj1odHRwczovL2t1YmUtZGV2LmRzcC5ub3Rwcm9kLmhvbWVvZmZpY2UuZ292LnVrIgogICAgICAtICJJTlNFQ1VSRV9TS0lQX1RMU19WRVJJRlk9dHJ1ZSIKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICB3aGVuOgogICAgICBicmFuY2g6IGRldgogICAgICBldmVudDogcHVzaAoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMS1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIK.OlJAx1MxszfFTkyAPKg0pCXBjwjOZ2yPGJCo9H13wgQ